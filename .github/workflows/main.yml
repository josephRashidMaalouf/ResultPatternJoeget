name: Publish NuGet Package

on:
  push:
    branches:
      - master
    paths:
      - 'ResultPatternJoeget/**'

  pull_request:
    branches: 
      - master
    paths:
      - 'ResultPatternJoeget/**'

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'

      - name: Restore dependencies
        run: dotnet restore ./ResultPatternJoeget

      - name: Get the version from csproj file
        id: version
        run: |
          VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" ./ResultPatternJoeget/ResultPatternJoeget.csproj)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if version already exists on NuGet
        id: version_check
        run: |
          PACKAGE_ID="results.joeget"
          PACKAGE_URL="https://api.nuget.org/v3-flatcontainer/$PACKAGE_ID/index.json"

          if curl --silent --fail "$PACKAGE_URL" > package_data.json; then
            RESPONSE=$(jq -r --arg VERSION "$VERSION" '.versions | index($VERSION)' package_data.json)
            if [ "$RESPONSE" != "null" ]; then
              echo "Version $VERSION already exists on NuGet. Skipping push."
              echo "skip=true" >> $GITHUB_ENV
            fi
          else
            echo "Package $PACKAGE_ID not found on NuGet. Proceeding with push."
          fi
          rm -f package_data.json
          
      - name: Build the project
        if: env.skip != 'true'
        run: dotnet build ./ResultPatternJoeget --configuration Release

      - name: Pack the NuGet package
        if: env.skip != 'true'
        run: dotnet pack ./ResultPatternJoeget --configuration Release --no-build

      - name: Push NuGet package to nuget.org
        if: github.event_name == 'push' && env.skip != 'true'
        run: dotnet nuget push **/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
